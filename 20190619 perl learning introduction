#Ubuntu写了个脚本 vi hello.pl 进入后，按i，插入后再输入
#！/usr/bin/perl
print "hello,World!/n"
chmod 764 hello.pl #改了权限
./hello.pl
hello, World!
#如果文本文件第一行的前两个字符是＃!,接下来是实际执行文件其余部分的程序的名称。
#书中举得例子，我看完后真的狂吐槽，我就是搞不懂这些火星符号代表了啥
#!/usr/bin/perl
@lines = `perldoc -u -f atan2`;
foreach (@lines) {
s/\w<([^>]+)>/\U$1/g;
print;
}
#首先在自己的Ubuntu安装了这个东西
sudo apt-get install perl-doc
perldoc --help
#其中参数代表的意思
-u   Display unformatted pod text
-f   Search Perl built-in functions
*此命令告诉您有关三角函数atan2的信息。我们在这里使用它只是作为我们希望处理其输出的外部命令的示例。
反引号中该命令的输出保存在名为@lines的数组变量中。下一行代码启动一个循环，处理这些行中的每一行。
在循环内部，语句是缩进的。虽然Perl不需要这个，但优秀的程序员可以这样做。
循环体内的第一条线是最可怕的一条线;它说s / \ w <（[^>] +）> / \ U $ 1 / g;。
在没有详细说明的情况下，我们只是说这可以改变任何具有尖括号（<>）的特殊标记的行，并且perldoc命令的输出中应该至少有一个。
下一行，突然移动，打印出每条（可能是修改过的）线。
结果输出应该类似于perldoc -u -f atan2本身可以做的，但是会出现任何这些标记出现的变化。
因此，在几行的范围内，我们运行另一个程序，将其输出保存在内存中，更新内存项并打印出来。
这种程序是Perl的一种相当普遍的用法，其中一种类型的数据被转换为另一种。

#上面表示看不懂
#Scalar Data http://www.runoob.com/perl/perl-data-types.html

#Perl 双引号和单引号的区别: 双引号可以正常解析一些转义字符与变量，而单引号无法解析会原样输出。
#举例说明：
#!/usr/bin/perl
 
$a = 10;
print "a = $a\n";
print 'a = $a\n';

#输出
a = 10
a = $a\n
#单引号无法解析转义字符与变量会原样输出。

\n 10 换行（newline）
\r 13 回车（return）
\u 强迫下一个字符为大写(Unicode 里的“标题”)
\l 强制下一个字符小写
\U 强制后面所有字符大写
\L 强制后面所有字符小写


#Perl 变量 - 变量是存储在内存中的数据，创建一个变量即会在内存上开辟一个空间。
#解释器会根据变量的类型来决定其在内存中的存储空间，因此你可以为变量分配不同的数据类型，如整型、浮点型、字符串等。
#Perl 为每个变量类型设置了独立的命令空间，所以不同类型的变量可以使用相同的名称，你不用担心会发生冲突。例如 $foo 和 @foo 是两个不同的变量。
#变量使用等号(=)来赋值。等号左边为变量，右边为值，实例如下


#标量变量-标量是一个单一的数据单元。 数据可以是整数，浮点数，字符，字符串，段落等。简单的说它可以是任何东西。以下是标量的简单应用：

#!/usr/bin/perl
 
$age = 25;             # 整型
$name = "runoob";      # 字符串
$salary = 1445.50;     # 浮点数
 
print "Age = $age\n";
print "Name = $name\n";
print "Salary = $salary\n";
#输出结果
Age = 25
Name = runoob
Salary = 1445.5


#数组变量
#数组是用于存储一个有序的标量值的变量。

#数组 @ 开始。

#要访问数组的变量，可以使用美元符号($)+变量名，并指定下标来访问，实例如下所示：
#!/usr/bin/perl
 
@ages = (25, 30, 40);             
@names = ("google", "runoob", "taobao");


#哈希变量

#如果要访问哈希值，可以使用 $ + {key} 格式来访问：
#!/usr/bin/perl
 
%data = ('google', 45, 'runoob', 30, 'taobao', 40);
 
print "\$data{'google'} = $data{'google'}\n";
print "\$data{'runoob'} = $data{'runoob'}\n";
print "\$data{'taobao'} = $data{'taobao'}\n";


#以上程序执行输出结果为：

$data{'google'} = 45
$data{'runoob'} = 30
$data{'taobao'} = 40

#变量上下文- 所谓上下文：指的是表达式所在的位置。
#上下文是由等号左边的变量类型决定的，等号左边是标量，则是标量上下文，等号左边是列表，则是列表上下文。

#!/usr/bin/perl
 
@names = ('google', 'runoob', 'taobao');
 
@copy = @names;   # 复制数组
$size = @names;   # 数组赋值给标量，返回数组元素个数
 
print "名字为 : @copy\n";
print "名字数为 : $size\n";
#上面程序输出结果是：
名字为 : google runoob taobao
名字数为 : 3

